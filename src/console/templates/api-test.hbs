import { api } from './lib/api';
import { DatabaseResetCommand } from '../../src/console/DatabaseResetCommand';
import { createAdminUser, getToken } from './lib/auth';
import {LoggerConfig} from '../../src/config/LoggerConfig';


describe('/{{name.pluralize}}', () => {

    {{#if isResourceTemplate}}const keys = [
        {{#each properties}}'{{name.camelCase}}'{{#unless @last}}, {{/unless}}{{/each}}
    ];

    const testData = {
        {{#each properties}}
        {{name.camelCase}}: undefined{{#unless @last}},{{/unless}} // TODO: Add test value
        {{/each}}
    };

    const testDataUpdated = {
        {{#each properties}}
        {{name.camelCase}}: undefined{{#unless @last}},{{/unless}} // TODO: Add test value
        {{/each}}
    };

    let token;
    let auth;
    let createdId;
    beforeAll(async () => {
        new LoggerConfig().configure();
        const command = new DatabaseResetCommand();
        await command.run();
        await createAdminUser();
        token = getToken();
        auth = {
            token
        };
    });

    test('POST      /{{name.pluralize}}        Should create a new {{name.lowerCase}}', async () => {
        const res = await api('POST', '/api/{{name.pluralize}}', {
            token,
            body: testData
        });
        res.expectJson();
        res.expectStatusCode(201);
        res.expectData(keys);
        createdId = res.getData()['id'];
    });

    test('POST      /{{name.pluralize}}        Should fail because we want to create a empty {{name.lowerCase}}', async () => {
        const res = await api('POST', '/api/{{name.pluralize}}', {
            token,
            body: {}
        });
        res.expectJson();
        res.expectStatusCode(400);
    });

    test('GET       /{{name.pluralize}}        Should list of {{name.lowerCase}}s with our new create one', async () => {
        const res = await api('GET', '/api/{{name.pluralize}}', auth);
        res.expectJson();
        res.expectStatusCode(200);
        res.expectData(keys);
        const data = res.getData<any[]>();
        expect(data.length).toBe(2);

        const result = data[1];
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('GET       /{{name.pluralize}}/:id    Should return one {{name.lowerCase}}', async () => {
        const res = await api('GET', `/api/{{name.pluralize}}/${createdId}`, auth);
        res.expectJson();
        res.expectStatusCode(200);
        res.expectData(keys);

        const result: any = res.getData();
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('PUT       /{{name.pluralize}}/:id    Should update the {{name.lowerCase}}', async () => {
        const res = await api('PUT', `/api/{{name.pluralize}}/${createdId}`, {
            token,
            body: testDataUpdated
        });
        res.expectJson();
        res.expectStatusCode(200);
        res.expectData(keys);

        const result: any = res.getData();
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testDataUpdated.{{name.camelCase}});
        {{/each}}
    });

    test('PUT       /{{name.pluralize}}/:id    Should fail because we want to update the {{name.lowerCase}} with a invalid email', async () => {
        const res = await api('PUT', `/api/{{name.pluralize}}/${createdId}`, {
            token,
            body: {
                email: 'abc'
            }
        });
        res.expectJson();
        res.expectStatusCode(400);
    });

    test('DELETE    /{{name.pluralize}}/:id    Should delete the {{name.lowerCase}}', async () => {
        const res = await api('DELETE', `/api/{{name.pluralize}}/${createdId}`, auth);
        res.expectStatusCode(200);
    });

    /**
     * 404 - NotFound Testing
     */
    test('GET       /{{name.pluralize}}/:id    Should return with a 404, because we just deleted the {{name.lowerCase}}', async () => {
        const res = await api('GET', `/api/{{name.pluralize}}/${createdId}`, auth);
        res.expectJson();
        res.expectStatusCode(404);
    });

    test('DELETE    /{{name.pluralize}}/:id    Should return with a 404, because we just deleted the {{name.lowerCase}}', async () => {
        const res = await api('DELETE', `/api/{{name.pluralize}}/${createdId}`, auth);
        res.expectJson();
        res.expectStatusCode(404);
    });

    test('PUT       /{{name.pluralize}}/:id    Should return with a 404, because we just deleted the {{name.lowerCase}}', async () => {
        const res = await api('PUT', `/api/{{name.pluralize}}/${createdId}`, {
        token,
        body: testData
    });{{/if}}

});
